{ code: 'try {\n    throw Error(\'oops\');\n}\ncatch (e) {\n    var xxx = 1;\n    console.log(e); // e should be in scope here\n}',
  trace: 
   [ { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { xxx: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'xxx' ],
       line: 2,
       col: 10,
       event: 'step_line',
       heap: {} },
     { exception_msg: 'Error: oops',
       stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { xxx: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'xxx' ],
       line: 2,
       col: 10,
       event: 'exception',
       heap: {} },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { e: [ 'REF', 1 ], xxx: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'e', 'xxx' ],
       line: 5,
       col: 4,
       event: 'step_line',
       heap: { '1': [ 'INSTANCE_PPRINT', 'object', 'Error: oops' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { e: [ 'REF', 1 ], xxx: 1 },
       ordered_globals: [ 'e', 'xxx' ],
       line: 6,
       col: 4,
       event: 'step_line',
       heap: { '1': [ 'INSTANCE_PPRINT', 'object', 'Error: oops' ] } },
     { stdout: '[Error: oops]\n',
       func_name: '',
       stack_to_render: [],
       globals: { xxx: 1 },
       ordered_globals: [ 'xxx' ],
       line: 7,
       col: 1,
       event: 'step_line',
       heap: {} } ] }
